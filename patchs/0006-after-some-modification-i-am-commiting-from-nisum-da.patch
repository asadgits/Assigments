From eb2941a97b44b8e6f0cead49a676d2eb2853d335 Mon Sep 17 00:00:00 2001
From: asadgits <iamasadiqbal@gmail.com>
Date: Fri, 23 Jul 2021 20:25:09 +0500
Subject: [PATCH 06/12] after some modification i am commiting from nisum date
 : 23/07/2021 ,time : 8:25

---
 ThirdTask/src/MainClass.java     | 93 ++++++--------------------------
 ThirdTask/src/first/First.java   | 34 ++++++++++++
 ThirdTask/src/fourth/Fourth.java | 18 +++++++
 ThirdTask/src/second/Second.java | 12 +++++
 ThirdTask/src/third/Third.java   | 31 +++++++++++
 5 files changed, 111 insertions(+), 77 deletions(-)
 create mode 100644 ThirdTask/src/first/First.java
 create mode 100644 ThirdTask/src/fourth/Fourth.java
 create mode 100644 ThirdTask/src/second/Second.java
 create mode 100644 ThirdTask/src/third/Third.java

diff --git a/ThirdTask/src/MainClass.java b/ThirdTask/src/MainClass.java
index 77c5f46..199cf66 100644
--- a/ThirdTask/src/MainClass.java
+++ b/ThirdTask/src/MainClass.java
@@ -1,3 +1,8 @@
+import first.First;
+import fourth.Fourth;
+import second.Second;
+import third.Third;
+
 import java.util.concurrent.TimeUnit;
 
 public class MainClass {
@@ -8,37 +13,13 @@ public class MainClass {
 
 //        "1. Write a java program to understand the difference between String literal and String Object. Also use ""equals()"" method and ""=="" operator to compare these Strings.
 
-        String first = "Helloworld";
-        String second = "Helloworld";
-        System.out.println(first.hashCode());
-        System.out.println("It matches only stack memory values rather thay are value or address " + first == second);
-//        basically the concept is "==" matches the values in stack memory like  when we create a variable [String firstVar]
-//        it creats block in string pool in heap memory because it is String literal and stores its address in stack memory
-//        like firstVar : 101
-//        then we create variable String secondVar it is also a string litral and its value is same as String firstVar  it save
-//        in stack memory like secondVar : 101
-//        And .equals() method checks the value on the location which is stored in Heap memory OR another reference
-//        variable's reference
-
-        System.out.println(first.equals(second));
-//        so equals() method goes to the end of the addresses and at the end it matches the ultimate value on the address
-//        and == only matches  the value which are in the stack memory
-
-        String fourth = new String("Helloworld");
-        String fifth = new String("Helloworld");
-
-        System.out.println(fifth == fourth); // these variables have different hashcode which are saved in stack memory so result is false
-
-        System.out.println(fifth.equals(fourth));// these variables has same values which are ultimately same in heap memory
-
-
+        First first = new First();
+        first.run();
 
 
 //        2. Write a java program to compare two Strings using ""compareTo()"" method.
 
-        String firstVar = "aa";
-        String secondVar = "aA";
-        System.out.println("\n\n CompareTo() METHOD EXAMPLE : "+firstVar.compareTo(secondVar));
+          Second second = new Second();
 
 //        compareTo() method first of all it works in lexicographically  order MEANS it compare words by picking one by one
 //        when it starts comparing it gets first character of a String then compare it with first character of a Second
@@ -50,82 +31,40 @@ public class MainClass {
 //        go further comperision of characters
 
 
-        //        3. Write a java program to make a String(""Java is an Object Oriented Language"") using ""StringBuffer"" and ""StringBuilder"" and
+//        3. Write a java program to make a String(""Java is an Object Oriented Language"") using ""StringBuffer"" and ""StringBuilder"" and
 //        also traverse through both the Strings and print the traversal time in milliseconds. Also observe which String class is faster than the other.
 
+        Third third = new Third();
+
         System.out.println("STRING BUILDER RESULT !!!!!!!!");
-        testStringBuilder();
+        third.testStringBuilder();
 
         System.out.println("STRING BUILDER RESULT !!!!!!!!");
-        testStringBuffer();
+        third.testStringBuffer();
 
 //        4. Write a java program to capitalize each word in string.
-            StringBuffer str1 = new StringBuffer();
-
-            String abcd = "Java is an Object Oriented Language";
-        for (int a: abcd.toCharArray()) {
-            if(a>=97 && a<=122 ){
-                a-= 32;
-                str1.append((char)a);
-            }
-            else{
-                str1.append((char)a);
-            }
-        }
+        Fourth fourth = new Fourth();
+        fourth.run();
 
 
-        System.out.println("\n\n\n"+str1.toString());
 //        5. Write a Java program to count the number of Prime Numbers less than a given positive number.
 //         Hint: To complete the above program, you can also start with a program to find if any given number is prime or not?"
 //
 
-        
-
-
 
 
 
 
 
 
-    }
-
-
-        public static void testStringBuffer(){
-
-
-            long starttime = System.nanoTime();
-
-            StringBuffer sb = new StringBuffer("Java is an Object Oriented Language");
-            int length = sb.length();
-            int i = 0;
-            for (; i < length; i++)
-                System.out.println("char no : "+(i+1)+" char is : "+ sb.charAt(i));
 
 
-            long mytime = System.nanoTime() - starttime;
 
-            System.out.println(mytime);
-            System.out.println((mytime/100000));
-        }
-
-    public static void testStringBuilder(){
-
-
-        long starttime = System.nanoTime();
+    }
 
-        StringBuilder sb = new StringBuilder("Java is an Object Oriented Language");
-        int length = sb.length();
-        int i = 0;
-        for (; i < length; i++)
-            System.out.println("char no : "+(i+1)+" char is : "+ sb.charAt(i));
 
 
-        long mytime = System.nanoTime() - starttime;
 
-        System.out.println(mytime);
-        System.out.println((mytime/100000));
-    }
 
 
 
diff --git a/ThirdTask/src/first/First.java b/ThirdTask/src/first/First.java
new file mode 100644
index 0000000..e952788
--- /dev/null
+++ b/ThirdTask/src/first/First.java
@@ -0,0 +1,34 @@
+package first;
+
+public class First {
+
+    public void run(){
+
+
+        String first = "Helloworld";
+        String second = "Helloworld";
+        System.out.println(first.hashCode());
+        System.out.println("It matches only stack memory values rather thay are value or address " + first == second);
+//        basically the concept is "==" matches the values in stack memory like  when we create a variable [String firstVar]
+//        it creats block in string pool in heap memory because it is String literal and stores its address in stack memory
+//        like firstVar : 101
+//        then we create variable String secondVar it is also a string litral and its value is same as String firstVar  it save
+//        in stack memory like secondVar : 101
+//        And .equals() method checks the value on the location which is stored in Heap memory OR another reference
+//        variable's reference
+
+        System.out.println(first.equals(second));
+//        so equals() method goes to the end of the addresses and at the end it matches the ultimate value on the address
+//        and == only matches  the value which are in the stack memory
+
+        String fourth = new String("Helloworld");
+        String fifth = new String("Helloworld");
+
+        System.out.println(fifth == fourth); // these variables have different hashcode which are saved in stack memory so result is false
+
+        System.out.println(fifth.equals(fourth));// these variables has same values which are ultimately same in heap memory
+
+
+
+    }
+}
diff --git a/ThirdTask/src/fourth/Fourth.java b/ThirdTask/src/fourth/Fourth.java
new file mode 100644
index 0000000..966414c
--- /dev/null
+++ b/ThirdTask/src/fourth/Fourth.java
@@ -0,0 +1,18 @@
+package fourth;
+
+public class Fourth {
+    public void run(){
+        StringBuffer str1 = new StringBuffer();
+        String abcd = "Java is an Object Oriented Language";
+        for (int a: abcd.toCharArray()) {
+            if(a>=97 && a<=122 ){
+                a-= 32;
+                str1.append((char)a);
+            }
+            else{
+                str1.append((char)a);
+            }
+        }
+        System.out.println("\n\n\n"+str1.toString());
+    }
+}
diff --git a/ThirdTask/src/second/Second.java b/ThirdTask/src/second/Second.java
new file mode 100644
index 0000000..50eb6c6
--- /dev/null
+++ b/ThirdTask/src/second/Second.java
@@ -0,0 +1,12 @@
+package second;
+
+public class Second {
+
+    public void run(){
+
+        String firstVar = "aa";
+        String secondVar = "aA";
+        System.out.println("\n\n CompareTo() METHOD EXAMPLE : "+firstVar.compareTo(secondVar));
+    }
+
+}
diff --git a/ThirdTask/src/third/Third.java b/ThirdTask/src/third/Third.java
new file mode 100644
index 0000000..7f5a2d4
--- /dev/null
+++ b/ThirdTask/src/third/Third.java
@@ -0,0 +1,31 @@
+package third;
+
+public class Third {
+    public static void testStringBuffer(){
+        long starttime = System.nanoTime();
+
+        StringBuffer sb = new StringBuffer("Java is an Object Oriented Language");
+        int length = sb.length();
+        int i = 0;
+        for (; i < length; i++)
+            System.out.println("char no : "+(i+1)+" char is : "+ sb.charAt(i));
+
+        long mytime = System.nanoTime() - starttime;
+
+        System.out.println((mytime/100000));
+    }
+
+    public static void testStringBuilder(){
+        long starttime = System.nanoTime();
+
+        StringBuilder sb = new StringBuilder("Java is an Object Oriented Language");
+        int length = sb.length();
+        int i = 0;
+        for (; i < length; i++)
+            System.out.println("char no : "+(i+1)+" char is : "+ sb.charAt(i));
+        long mytime = System.nanoTime() - starttime;
+
+        System.out.println((mytime/100000));
+    }
+
+}
-- 
2.32.0.windows.2

